import{_ as d,a as s,b as n,c as t}from"./keyboard-height-demo.218e4dbb.js";import{_ as o,r as h,o as p,c as l,a,f as m,b as c,e as i,d as u,w as b}from"./app.6ae9cb3a.js";const f={};function g(x,e){const r=h("RouterLink");return p(),l("div",null,[e[2]||(e[2]=a('<h1 id="设置键盘" tabindex="-1"><a class="header-anchor" href="#设置键盘" aria-hidden="true">#</a> 设置键盘</h1><p>此指南需要已经完成第三方扩展键盘的添加，即可以在输入时选择「ToMemo」。如果对此有疑问请查看<a href="/guide/settings">「指南/应用设置/添加键盘」</a></p><h2 id="键盘设置基础" tabindex="-1"><a class="header-anchor" href="#键盘设置基础" aria-hidden="true">#</a> 键盘设置基础</h2>',3)),m(` ::: details 键盘设置如下
![keyboad-settings.jpg](/images/keyboard/keyboad-settings.jpg)
::: `),e[3]||(e[3]=a('<h3 id="展示类型" tabindex="-1"><a class="header-anchor" href="#展示类型" aria-hidden="true">#</a> 展示类型</h3><p>此设置与「Memo」中的展示类型功能类似。 用于设置键盘中展示的内容类型：Memo维度和列表维度。</p><h4 id="memo维度" tabindex="-1"><a class="header-anchor" href="#memo维度" aria-hidden="true">#</a> Memo维度</h4><details class="custom-container details"><summary>所有Memo</summary><p><img src="'+d+'" alt="keyboard-all-memos.jpg"></p></details><h4 id="列表维度" tabindex="-1"><a class="header-anchor" href="#列表维度" aria-hidden="true">#</a> 列表维度</h4><details class="custom-container details"><summary>所有列表</summary><p><img src="'+s+'" alt="keyboard-all-list.jpg"></p></details><h3 id="自动读取剪切板" tabindex="-1"><a class="header-anchor" href="#自动读取剪切板" aria-hidden="true">#</a> 自动读取剪切板</h3><p>因为iOS系统的限制，对于剪切板读取的操作只能在活跃的应用中执行（简单理解成：屏幕中显示出来的应用）。 在键盘中自动读取剪切板是应用获取监控板数据的一种方式。</p><p><strong>此功能需要开启「允许完全访问」</strong></p><p>如果开启自动读取剪切板，需要阅读剪切板使用需知中的内容，并跳转到系统设置中开启「允许完全访问」的权限。</p><p>从隐私的角度看，键盘的「允许完全访问」是一个比较大的隐私泄露风险的权限，所以需要自行斟酌一下。</p><p>识别剪切板变化需要在键盘中监控剪切板，但是这个功能超出了离线输入法的能力范畴，是从系统服务中获取的内容，因此需要开启「允许完全访问」。</p><p>如果只需要使用 快速输入ToMemo应用中添加的内容（懒人短句），这个并不需要开启「允许完全访问」。</p><p>同时，说明一下，ToMemo没有自己的服务器，所以在开启「允许完全访问」后，ToMemo应用包括键盘不会传输任何数据到其他的系统中，请放心使用。</p><h4 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h4><p><strong>开启「自动读取剪切板」后，键盘中依旧不能识别到剪切板的变化？</strong></p><p>前提：在系统设置中，给ToMemo键盘开启了「允许完全访问」权限。</p><p>方法一：切换到其他的输入法，再切回来。再次复制内容进行尝试。</p><p>方法二：在键盘设置中关闭ToMemo键盘，然后重新开启。在键盘加载进来后，再次尝试复制文本。</p><h3 id="输入后自动切回上个输入法" tabindex="-1"><a class="header-anchor" href="#输入后自动切回上个输入法" aria-hidden="true">#</a> 输入后自动切回上个输入法</h3><p>在正常的使用过程中，大部分的情况是一次只要输入一条Memo的内容。然后需要回到上一个输入法继续进行输入。当需要了再次切换回ToMemo键盘进行快捷输入。</p><p>因此，产生了一个需求，每次点击Memo输入后，最好能自动切换回上一个输入法，不然需要手动点击左下角的切换图标，比较麻烦。</p><p>开启此功能后，键盘中左下角可以切换输入法的图标会发生变化。</p><p>无刘海屏的机型：</p><ul><li>如果是单纯的地球图标，意味着未开启自动切换回上个输入法的功能</li><li>如果是地球图标加上向左的箭头，意味着开启自动切换回上个输入法的功能，会在输入完成后自动切换。</li></ul><p>有刘海屏的机型： 隐藏了该图标。</p><h4 id="本次输入暂停使用自动切换" tabindex="-1"><a class="header-anchor" href="#本次输入暂停使用自动切换" aria-hidden="true">#</a> 本次输入暂停使用自动切换</h4><p>虽然大多数情况一次只需要输入一条Memo，但随着「短时记忆」功能的加入，一次性需要多次输入的场景也变多了。</p><p>所以在开启了自动切换的功能后，键盘中同时会出现一个锁的图标。点击锁即可切换「本次输入暂停使用自动切换」的功能</p><ul><li>如果合起来的锁，意味着当前键盘已经锁定，多次输入后不自动切换。</li><li>如果打开的锁，意味着自动切换功能正常运作。</li></ul><h3 id="左右滑动切换列表" tabindex="-1"><a class="header-anchor" href="#左右滑动切换列表" aria-hidden="true">#</a> 左右滑动切换列表</h3><p><em>此功能在键盘内容类型为「Memo」时可以开启。</em></p><p>在键盘中，如果<strong>Memo的数量比较多</strong>，但<strong>列表的数量不多</strong>的情况下，一直下滑寻找Memo是一件费力的事情，为了改善这个问题，提供可以横向滑动切换列表的功能，键盘中横向滑动即可切换列表，上下滑动浏览列表中的Memo。</p><details class="custom-container details"><summary>横向滑动示例</summary><p><img src="'+n+`" alt="keyboard-swipe-list.jpg"></p></details><h3 id="列表留存时长" tabindex="-1"><a class="header-anchor" href="#列表留存时长" aria-hidden="true">#</a> 列表留存时长</h3><p><em>此功能在键盘内容类型为「列表」时可以开启。</em></p><p>在日常的使用中，会碰到一个场景：</p><div class="language-场景 line-numbers-mode" data-ext="场景"><pre class="language-场景"><code>有一个应用宣发的列表，需要将资料发给同事。
将键盘切换到ToMemo键盘后，进入「应用宣发」列表，
然后点击「App Store地址」，自动发送应用地址到输入框。
然后切换回原生输入框，输入一些文字。
并再次回到ToMemo键盘，需要发送「App 推广文案」。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个场景下，如果在列表留存的时长内，会自动打开上一次使用的列表，方便用户直接发送「App 推广文案」。</p><h3 id="短时记忆面板留存时长" tabindex="-1"><a class="header-anchor" href="#短时记忆面板留存时长" aria-hidden="true">#</a> 短时记忆面板留存时长</h3><p><em>此功能在开启了短时记忆时才会展示。</em></p><p>在键盘中使用了短时记忆输入后，如果在自定义时长内再次打开键盘，会自动进入短时记忆列表页。</p>`,42)),c("p",null,[e[1]||(e[1]=i("关于「留存时长」可以查阅")),u(r,{to:"/questions/"},{default:b(()=>e[0]||(e[0]=[i("「常见疑问/设置中的留存时长是什么意思？」")])),_:1})]),e[4]||(e[4]=a('<h3 id="一行多列" tabindex="-1"><a class="header-anchor" href="#一行多列" aria-hidden="true">#</a> 一行多列</h3><p>对于标题比较短的Memo而言，一行显示一条数据对空间比较浪费，所以可以自定义选择每一行展示的列数。</p><p>这样方便在Memo多的时候，让键盘中的有效信息的展示范围变多，提升使用效率。</p><h3 id="键盘高度" tabindex="-1"><a class="header-anchor" href="#键盘高度" aria-hidden="true">#</a> 键盘高度</h3><p>ToMemo键盘中展示的内容较多，且为了展示更多有效信息，所以键盘默认的高度与原生键盘的高度存在差异。</p><p>在默认高度下切换键盘会出现输入框或者键盘上方扩展栏抖动的情况，对于使用体验不友好。</p><p>为了使键盘切换更加顺滑，可以自定义键盘高度。用户可以直接在输入框中输入高度，输入完成后点击界面背景，会自动收起键盘，并调整「键盘占位空间」高度，方便预览。</p><p>同时，提供了两个参考高度。</p><h4 id="当前键盘" tabindex="-1"><a class="header-anchor" href="#当前键盘" aria-hidden="true">#</a> 当前键盘</h4><p>需要用户点击「键盘高度」输入框后，将键盘切换成需要参考高度的键盘。然后点击「当前键盘」按钮，此时会自动计算需要调节的键盘高度，使得ToMemo键盘与对应键盘高度一致。</p><h4 id="默认" tabindex="-1"><a class="header-anchor" href="#默认" aria-hidden="true">#</a> 默认</h4><p>这个按钮是将键盘重置回默认的高度值。</p><details class="custom-container details"><summary>键盘高度设置</summary><p><img src="'+t+'" alt="keyboard-height-demo.gif"></p></details><h3 id="按键音" tabindex="-1"><a class="header-anchor" href="#按键音" aria-hidden="true">#</a> 按键音</h3><p>在键盘中点击时，发出键盘模拟声，有三种类型：</p><ul><li>输入</li><li>删除</li><li>功能按钮</li></ul><h3 id="放大显示" tabindex="-1"><a class="header-anchor" href="#放大显示" aria-hidden="true">#</a> 放大显示</h3><p>在键盘中，为了展示更多的内容，将键盘按钮设置的较小，为了更好地体验，提供放大显示的能力。</p><p>能将键盘按钮稍微放大一些。</p><h3 id="当前日期、当期时间" tabindex="-1"><a class="header-anchor" href="#当前日期、当期时间" aria-hidden="true">#</a> 当前日期、当期时间</h3><p>开启后，会在键盘的右下角多出直接输入当前时间、当前日期的按钮。</p><p>只要点击就可以快捷输入日期时间。</p><h3 id="自定义工具栏布局" tabindex="-1"><a class="header-anchor" href="#自定义工具栏布局" aria-hidden="true">#</a> 自定义工具栏布局</h3><p>开放顶部工具栏中按钮的自定义布局的功能。可以自由调整按钮的位置以及需要开放的按钮。</p><p>在模拟的顶部工具栏中，</p><ul><li>拖动按钮：添加或调整按钮的位置</li><li>双击按钮：删除此按钮</li><li>编辑完成后，需要点击右上角保存</li><li>默认：恢复到系统默认的布局</li></ul>',26))])}const y=o(f,[["render",g],["__file","index.html.vue"]]);export{y as default};
