import{_ as r,o as i,c as h,a as e,f as d}from"./app.6ae9cb3a.js";const n={};function t(l,a){return i(),h("div",null,[a[0]||(a[0]=e('<h1 id="短时记忆使用" tabindex="-1"><a class="header-anchor" href="#短时记忆使用" aria-hidden="true">#</a> 短时记忆使用</h1><h2 id="什么是短时记忆" tabindex="-1"><a class="header-anchor" href="#什么是短时记忆" aria-hidden="true">#</a> 什么是短时记忆</h2><p>短时记忆的功能来自<code>剪切板历史管理</code>。</p><p>可以将每一个剪切板复制的内容看成一条短时记忆，暂存在我们脑海中，会在短时间内使用到。</p><p>因为ios系统的限制，使得应用无法在后台时获取剪切板数据，无法做到剪切板历史数据的收集。但是在日常的场景中会有多条临时的内容通过复制和粘贴分享给其他人。需要一种能快捷保存临时内容和整理的地方。将这个功能结合进来，变成了「短时记忆」。</p><p>所以让用户便捷的将剪切板内容放入短时记忆，是这一块功能一直探寻的方向之一。</p><h2 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用" aria-hidden="true">#</a> 基础使用</h2><h3 id="长按短时记忆记录" tabindex="-1"><a class="header-anchor" href="#长按短时记忆记录" aria-hidden="true">#</a> 长按短时记忆记录</h3><p>提供拷贝、切换星标、保存为Memo的功能。</p><h3 id="左划删除" tabindex="-1"><a class="header-anchor" href="#左划删除" aria-hidden="true">#</a> 左划删除</h3><p>向左划动短时记忆的记录，将删除当前记录。</p><h3 id="右划标星" tabindex="-1"><a class="header-anchor" href="#右划标星" aria-hidden="true">#</a> 右划标星</h3><p>右划短时记忆的记录，将记录加上图标，再次右划可以取消。</p><p><strong>标星主要用于表示当前记录为未来会使用的功能</strong>，当批量删除时，不会删除标记有星标的记录。</p><p><strong>没有置顶功能</strong>，如果记录置顶会让最新的记录后置，无法直接获取到最新的记录。</p><h3 id="批量删除" tabindex="-1"><a class="header-anchor" href="#批量删除" aria-hidden="true">#</a> 批量删除</h3><p>点击页面右上角的扩展菜单栏，操作批量删除，会将所有<strong>非星标</strong>的记录批量删除，达到清空剪切板历史的效果。</p>',17)),d(` 
### 演示视频

::: details 演示视频
![short-term-memory-basic-demo.gif](/images/short-term-memory/short-term-memory-basic-demo.gif)
::: `),a[1]||(a[1]=e('<h2 id="短时记忆过滤规则" tabindex="-1"><a class="header-anchor" href="#短时记忆过滤规则" aria-hidden="true">#</a> 短时记忆过滤规则</h2><p>通过添加过滤规则，可以将无效的内容拒之门外，只让有必要的内容进入我们的记忆之中。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>只要剪切板内容符合规则，就会被应用忽略，不保存到短时记忆中</p></div><h3 id="过滤规则的类型" tabindex="-1"><a class="header-anchor" href="#过滤规则的类型" aria-hidden="true">#</a> 过滤规则的类型</h3><ul><li>正则表达式 <ul><li>更精准地识别不需要的内容</li></ul></li><li>包含的内容 <ul><li>只要包含了特定内容，就会自动过滤，不受打扰</li></ul></li></ul><h2 id="短时记忆预先处理动作" tabindex="-1"><a class="header-anchor" href="#短时记忆预先处理动作" aria-hidden="true">#</a> 短时记忆预先处理动作</h2><p>添加部分预先处理动作，让工具自动化提升日常的效率。</p><h3 id="支持的动作" tabindex="-1"><a class="header-anchor" href="#支持的动作" aria-hidden="true">#</a> 支持的动作</h3><ul><li>中文文案排版 <ul><li>在中英文混排时，自动增加空格，提升可读性</li></ul></li><li>删除空行 <ul><li>内容过多的空行，只会让我们增加阅读成本</li></ul></li><li>删除空格 <ul><li>识别出来的的内容，会有奇怪的空格，影响后续的使用</li></ul></li><li>大小写转写 <ul><li>长文本的转换，不需要再手动打字</li></ul></li></ul><h2 id="短时记忆详情页" tabindex="-1"><a class="header-anchor" href="#短时记忆详情页" aria-hidden="true">#</a> 短时记忆详情页</h2><p>进入后可以直接编辑短时记忆</p><h3 id="保存为memo" tabindex="-1"><a class="header-anchor" href="#保存为memo" aria-hidden="true">#</a> 保存为Memo</h3><p>将短时记忆快速变成Memo内容，方便下一次的输入</p><h3 id="复制" tabindex="-1"><a class="header-anchor" href="#复制" aria-hidden="true">#</a> 复制</h3><p>直接复制短时记忆内容</p><h3 id="保存" tabindex="-1"><a class="header-anchor" href="#保存" aria-hidden="true">#</a> 保存</h3><p>短时记忆修改后，保存下来，键盘中直接可以使用</p>',17))])}const o=r(n,[["render",t],["__file","short-term-memory.html.vue"]]);export{o as default};
